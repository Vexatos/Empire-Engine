// Date: 10/20/2012 2:18:53 AM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package dark.empire.core.client;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

public class ModelDroid extends ModelBase
{
    // fields
    ModelRenderer Eye;
    ModelRenderer Head;
    ModelRenderer neck;
    ModelRenderer body;
    ModelRenderer intena;
    ModelRenderer bodyB;
    ModelRenderer HipMid;
    ModelRenderer rightleg;
    ModelRenderer rightlegB;
    ModelRenderer rightFoot;
    ModelRenderer leftleg;
    ModelRenderer leftlegB;
    ModelRenderer leftFoot;
    ModelRenderer spinA;
    ModelRenderer spinB;
    ModelRenderer spinC;
    ModelRenderer spinD;
    ModelRenderer RightArm;
    ModelRenderer RightArmLower;
    ModelRenderer RightHand;
    ModelRenderer LeftArm;
    ModelRenderer LeftArmLower;
    ModelRenderer LeftHand;
    ModelRenderer backPack;

    public ModelDroid()
    {
        textureWidth = 128;
        textureHeight = 64;

        Eye = new ModelRenderer(this, 15, 26);
        Eye.addBox(-1F, -2.5F, -2.5F, 2, 2, 1);
        Eye.setRotationPoint(0F, -1F, 0F);
        Eye.setTextureSize(128, 64);
        Eye.mirror = true;
        setRotation(Eye, 0F, 0F, 0F);
        Head = new ModelRenderer(this, 0, 26);
        Head.addBox(-1.5F, -3F, -1.5F, 3, 3, 4);
        Head.setRotationPoint(0F, -1F, 0F);
        Head.setTextureSize(128, 64);
        Head.mirror = true;
        setRotation(Head, 0F, 0F, 0F);
        neck = new ModelRenderer(this, 1, 22);
        neck.addBox(-1F, -1F, -0.5F, 2, 1, 2);
        neck.setRotationPoint(0F, 0F, 0F);
        neck.setTextureSize(128, 64);
        neck.mirror = true;
        setRotation(neck, 0F, 0F, 0F);
        body = new ModelRenderer(this, 0, 48);
        body.addBox(-3F, 0F, -1F, 6, 3, 3);
        body.setRotationPoint(0F, 0F, 0F);
        body.setTextureSize(128, 64);
        body.mirror = true;
        setRotation(body, 0F, 0F, 0F);
        intena = new ModelRenderer(this, 15, 40);
        intena.addBox(1.4F, -5F, 1.9F, 1, 5, 1);
        intena.setRotationPoint(0F, 0F, 0F);
        intena.setTextureSize(128, 64);
        intena.mirror = true;
        setRotation(intena, 0F, 0F, 0F);
        bodyB = new ModelRenderer(this, 0, 54);
        bodyB.addBox(-2.5F, 3F, -0.5F, 5, 2, 2);
        bodyB.setRotationPoint(0F, 0F, 0F);
        bodyB.setTextureSize(128, 64);
        bodyB.mirror = true;
        setRotation(bodyB, 0F, 0F, 0F);
        HipMid = new ModelRenderer(this, 15, 55);
        HipMid.addBox(-1F, -2F, -0.5F, 2, 3, 2);
        HipMid.setRotationPoint(0F, 11F, 0F);
        HipMid.setTextureSize(128, 64);
        HipMid.mirror = true;
        setRotation(HipMid, 0F, 0F, 0F);
        rightleg = new ModelRenderer(this, 55, 38);
        rightleg.addBox(-1F, -1F, -1F, 2, 7, 2);
        rightleg.setRotationPoint(-2F, 11F, 0.5F);
        rightleg.setTextureSize(128, 64);
        rightleg.mirror = true;
        setRotation(rightleg, 0F, 0F, 0F);
        rightlegB = new ModelRenderer(this, 51, 48);
        rightlegB.addBox(-1.5F, 0F, -1F, 3, 5, 3);
        rightlegB.setRotationPoint(-2F, 17F, 0F);
        rightlegB.setTextureSize(128, 64);
        rightlegB.mirror = true;
        setRotation(rightlegB, 0F, 0F, 0F);
        rightFoot = new ModelRenderer(this, 45, 57);
        rightFoot.addBox(-2.5F, 0F, -2.5F, 4, 2, 5);
        rightFoot.setRotationPoint(-2F, 22F, 0F);
        rightFoot.setTextureSize(128, 64);
        rightFoot.mirror = true;
        setRotation(rightFoot, 0F, 0F, 0F);
        leftleg = new ModelRenderer(this, 64, 38);
        leftleg.addBox(-1F, -1F, -1F, 2, 7, 2);
        leftleg.setRotationPoint(2F, 11F, 0.5F);
        leftleg.setTextureSize(128, 64);
        leftleg.mirror = true;
        setRotation(leftleg, 0F, 0F, 0F);
        leftlegB = new ModelRenderer(this, 64, 48);
        leftlegB.addBox(-1.5F, 0F, -1F, 3, 5, 3);
        leftlegB.setRotationPoint(2F, 17F, 0F);
        leftlegB.setTextureSize(128, 64);
        leftlegB.mirror = true;
        setRotation(leftlegB, 0F, 0F, 0F);
        leftFoot = new ModelRenderer(this, 64, 57);
        leftFoot.addBox(-1.5F, 0F, -2.5F, 4, 2, 5);
        leftFoot.setRotationPoint(2F, 22F, 0F);
        leftFoot.setTextureSize(128, 64);
        leftFoot.mirror = true;
        setRotation(leftFoot, 0F, 0F, 0F);
        spinA = new ModelRenderer(this, 9, 60);
        spinA.addBox(-0.5F, 6F, 0F, 1, 1, 1);
        spinA.setRotationPoint(0F, 0F, 0F);
        spinA.setTextureSize(128, 64);
        spinA.mirror = true;
        setRotation(spinA, 0F, 0F, 0F);
        spinB = new ModelRenderer(this, 0, 59);
        spinB.addBox(-1F, 5F, -0.5F, 2, 1, 2);
        spinB.setRotationPoint(0F, 0F, 0F);
        spinB.setTextureSize(128, 64);
        spinB.mirror = true;
        setRotation(spinB, 0F, 0F, 0F);
        spinC = new ModelRenderer(this, 9, 60);
        spinC.addBox(-0.5F, 8F, 0F, 1, 1, 1);
        spinC.setRotationPoint(0F, 0F, 0F);
        spinC.setTextureSize(128, 64);
        spinC.mirror = true;
        setRotation(spinC, 0F, 0F, 0F);
        spinD = new ModelRenderer(this, 0, 59);
        spinD.addBox(-1F, 7F, -0.5F, 2, 1, 2);
        spinD.setRotationPoint(0F, 0F, 0F);
        spinD.setTextureSize(128, 64);
        spinD.mirror = true;
        setRotation(spinD, 0F, 0F, 0F);
        RightArm = new ModelRenderer(this, 29, 38);
        RightArm.addBox(-2F, -1F, -1F, 2, 4, 2);
        RightArm.setRotationPoint(-3F, 1.5F, 0.5F);
        RightArm.setTextureSize(128, 64);
        RightArm.mirror = true;
        setRotation(RightArm, 0F, 0F, 0F);
        RightArmLower = new ModelRenderer(this, 25, 45);
        RightArmLower.addBox(-1.5F, 0F, -1.5F, 3, 4, 3);
        RightArmLower.setRotationPoint(-4F, 4.5F, 0.5F);
        RightArmLower.setTextureSize(128, 64);
        RightArmLower.mirror = true;
        setRotation(RightArmLower, 0F, 0F, 0F);
        RightHand = new ModelRenderer(this, 29, 53);
        RightHand.addBox(-1F, 4F, -1F, 2, 2, 2);
        RightHand.setRotationPoint(-4F, 4.5F, 0.5F);
        RightHand.setTextureSize(128, 64);
        RightHand.mirror = true;
        setRotation(RightHand, 0F, 0F, 0F);
        LeftArm = new ModelRenderer(this, 38, 38);
        LeftArm.addBox(0F, -1F, -1F, 2, 4, 2);
        LeftArm.setRotationPoint(3F, 1.5F, 0.5F);
        LeftArm.setTextureSize(128, 64);
        LeftArm.mirror = true;
        setRotation(LeftArm, 0F, 0F, 0F);
        LeftArmLower = new ModelRenderer(this, 38, 45);
        LeftArmLower.addBox(-1.5F, 0F, -1.5F, 3, 4, 3);
        LeftArmLower.setRotationPoint(4F, 4.5F, 0.5F);
        LeftArmLower.setTextureSize(128, 64);
        LeftArmLower.mirror = true;
        setRotation(LeftArmLower, 0F, 0F, 0F);
        LeftHand = new ModelRenderer(this, 38, 53);
        LeftHand.addBox(-1F, 4F, -1F, 2, 2, 2);
        LeftHand.setRotationPoint(4F, 4.5F, 0.5F);
        LeftHand.setTextureSize(128, 64);
        LeftHand.mirror = true;
        setRotation(LeftHand, 0F, 0F, 0F);
        backPack = new ModelRenderer(this, 0, 40);
        backPack.addBox(-2.5F, 0F, 1F, 5, 4, 2);
        backPack.setRotationPoint(0F, 0F, 0F);
        backPack.setTextureSize(128, 64);
        backPack.mirror = true;
        setRotation(backPack, 0F, 0F, 0F);
    }

    @Override
    public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
    {
        super.render(entity, f, f1, f2, f3, f4, f5);
        setRotationAngles(f, f1, f2, f3, f4, f5, entity);
        // Main Droid Body
        Eye.render(f5);
        Head.render(f5);
        neck.render(f5);
        body.render(f5);
        backPack.render(f5);
        bodyB.render(f5);
        HipMid.render(f5);
        rightleg.render(f5);
        rightlegB.render(f5);
        rightFoot.render(f5);
        leftleg.render(f5);
        leftlegB.render(f5);
        leftFoot.render(f5);
        spinA.render(f5);
        spinB.render(f5);
        spinC.render(f5);
        spinD.render(f5);
        RightArm.render(f5);
        RightArmLower.render(f5);
        RightHand.render(f5);
        LeftArm.render(f5);
        LeftArmLower.render(f5);
        LeftHand.render(f5);
        backPack.render(f5);
        // Droid parts
    }

    private void setRotation(ModelRenderer model, float x, float y, float z)
    {
        model.rotateAngleX = x;
        model.rotateAngleY = y;
        model.rotateAngleZ = z;
    }

    @Override
    public void setRotationAngles(float par1, float par2, float par3, float par4, float par5, float par6, Entity entity)
    {
        // Head animation
        Eye.rotateAngleX = par5 / (180F / (float) Math.PI);
        Head.rotateAngleX = par5 / (180F / (float) Math.PI);
        Eye.rotateAngleY = par4 / (180F / (float) Math.PI);
        Head.rotateAngleY = par4 / (180F / (float) Math.PI);
        // arms
        // this.RightArm.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 2.0F *
        // par2 * 0.5F;
        // this.LeftArm.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 2.0F * par2 * 0.5F;
        // legs
        int minAng = 15;
        int maxAng = -3;
        float rAng = Math.max(maxAng, Math.min(minAng, MathHelper.cos(par1 * 0.6662F) * 1.4F * par2));
        float lAng = Math.max(maxAng, Math.min(minAng, MathHelper.cos(par1 * 0.6662F + (float) Math.PI) * 1.4F * par2));
        if (rAng != 0)
        {
            // TODO pitch both slightly forward and extend lower arms while running.
        }
        this.rightleg.rotateAngleX = rAng;
        this.leftleg.rotateAngleX = lAng;
        float pRAng = rAng / 360;
        float pLAng = lAng / 360;
        this.rightlegB.rotateAngleX = Math.max(0, -rAng + (pRAng * 10));// knee can't bend 0+
                                                                        // degrees
        this.leftlegB.rotateAngleX = Math.max(0, -lAng + (pLAng * 10));
        this.rightFoot.rotateAngleX = Math.max(0, -rAng + (pRAng * 7));
        this.leftFoot.rotateAngleX = Math.max(0, -lAng + (pLAng * 7));
        this.leftlegB.rotationPointY = 9.8f;
        this.rightlegB.rotationPointY = 9.8f;
        this.leftFoot.rotationPointY = 9.8f;
        this.rightFoot.rotationPointY = 9.8f;
        this.leftlegB.rotationPointZ = -0.5f;
        this.rightlegB.rotationPointZ = -0.5f;
        this.leftFoot.rotationPointZ = -0.5f;
        this.rightFoot.rotationPointZ = -0.5f;
        this.leftlegB.rotationPointY += 6 * Math.cos(this.leftleg.rotateAngleX);
        this.rightlegB.rotationPointY += 6 * Math.cos(this.rightleg.rotateAngleX);
        this.leftlegB.rotationPointZ += (float) (6 * Math.sin(this.leftleg.rotateAngleX));
        this.rightlegB.rotationPointZ += (float) (6 * Math.sin(this.rightleg.rotateAngleX));
        this.leftFoot.rotationPointY += 6 * Math.cos(this.leftleg.rotateAngleX) + 5 * Math.cos(this.leftlegB.rotateAngleX);
        this.rightFoot.rotationPointY += 6 * Math.cos(this.rightleg.rotateAngleX) + 5 * Math.cos(this.rightlegB.rotateAngleX);
        this.leftFoot.rotationPointZ += (float) (6 * Math.sin(this.leftleg.rotateAngleX)) + (float) (5 * Math.sin(this.leftlegB.rotateAngleX));
        this.rightFoot.rotationPointZ += (float) (6 * Math.sin(this.rightleg.rotateAngleX)) + (float) (5 * Math.sin(this.rightlegB.rotateAngleX));
        //
        super.setRotationAngles(par1, par2, par3, par4, par5, par6, entity);
    }

}
